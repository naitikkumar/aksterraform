# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

variables:
  vmimage: 'ubuntu-latest'

pool:
  vmImage: $(vmimage)

stages:
  - stage: Terraform_validation
    jobs:
      - job: Terrform_validation
        continueOnError: false
        steps:
         - task: PublishPipelineArtifact@1
           displayName: publish artifact to pipelineworks
           inputs:
             targetPath: '$(Pipeline.Workspace)'
             artifact: 'terraform-manifests-out'
             publishLocation: 'pipeline'
         - task: TerraformInstaller@0
           displayName: terraform install version
           inputs:
             terraformVersion: 'latest'

         - task: TerraformCLI@0
           displayName: terraform-initialize
           inputs:
             command: 'init'
             backendType: 'azurerm'
             backendServiceArm: 'Terraform_aks_deploy_connection_acitve_directory'
             backendAzureRmResourceGroupName: 'terrform_rg'
             backendAzureRmStorageAccountName: 'terraformtfstateyd'
             backendAzureRmContainerName: 'statefiles'
             backendAzureRmKey: 'dev-terraform.tfstate'
             allowTelemetryCollection: false
            
         - task: TerraformCLI@0
           displayName: terraform validate of manifests
           inputs:
             command: 'validate'
             allowTelemetryCollection: false

  - stage: Terraform_deploy
    jobs:
      - job: Terraform_deploy
        steps:     
         - task: DownloadSecureFile@1
           name: ssh
           displayName: dowload secure ssh file
           inputs:
              secureFile: 'aks_id_rsa.pub'
          

         - task: TerraformCLI@0
           displayName: terraform initalize
           inputs:
             command: 'init'
             workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
             backendType: 'azurerm'
             backendServiceArm: 'Terraform_aks_deploy_connection_acitve_directory'
             backendAzureRmResourceGroupName: 'terrform_rg'
             backendAzureRmStorageAccountName: 'terraformtfstateyd'
             backendAzureRmContainerName: 'statefiles'
             backendAzureRmKey: 'dev-terraform.tfstate'
             allowTelemetryCollection: false
