# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

variables:
  vmimage: 'ubuntu-latest'
pool:
  vmImage: $(vmimage)

stages:
  - stage: TerraformValidate
    jobs:
      - job: Terraformvalidate
        continueOnError: false
        steps:
          - task: PublishPipelineArtifact@1
            displayName: publish terraform manifest for pipeline
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)'
              artifact: 'terraform-manifest-out'
              publishLocation: 'pipeline'
          - task: TerraformInstaller@0
            displayName: install latest version of terraform on agents
            inputs:
              terraformVersion: 'latest'
          - task: TerraformCLI@0
            displayName: TerraformIntilaize
            inputs:
              command: 'init'
              backendType: 'azurerm'
              backendServiceArm: 'Terraform_aks_deploy_connection_acitve_directory'
              backendAzureRmResourceGroupName: 'terrform_rg'
              backendAzureRmStorageAccountName: 'terraformtfstateyd'
              backendAzureRmContainerName: 'statefiles'
              backendAzureRmKey: 'azuredevops.terraform.tfstate'
              allowTelemetryCollection: false
          - task: TerraformCLI@0
            displayName: TerraformValidate
            inputs:
              command: 'validate'
              allowTelemetryCollection: false
  - stage: TerraformDeploy
    jobs:
      - job: TerraformDeploy
        pool:
          vmImage: $(vmimge)
        variables:
         vmimge: 'ubuntu-latest'
        steps:
               - task: DownloadSecureFile@1
                 displayName: Download ssh key
                 name: aks_ssh
                 inputs:
                   secureFile: 'aks_id_rsa.pub'
               - task: TerraformCLI@0
                 displayName: Terraform intialize
                 inputs:
                   command: 'init'
                   workingDirectory: '$(Build.StagingDirectory)'
                   backendType: 'azurerm'
                   backendServiceArm: 'Terraform_aks_deploy_connection_acitve_directory'
                   backendAzureRmResourceGroupName: 'terrform_rg'
                   backendAzureRmStorageAccountName: 'terraformtfstateyd'
                   backendAzureRmContainerName: 'statefiles'
                   backendAzureRmKey: 'dev.terraform.tfstate'
                   allowTelemetryCollection: false
               
               - task: TerraformCLI@0
                 displayName: Terraform plan
                 inputs:
                   command: 'plan'
                   workingDirectory: '$(System.DefaultWorkingDirectory)'
                   environmentServiceName: 'Terraform_aks_deploy_connection_acitve_directory'
                   commandOptions: '-var ssh_key=$(aks_ssh.secureFilePath) -out $(Build.StagingDirectory)/dev-$(Build.BuildId).out'
                   allowTelemetryCollection: false
              
               - task: TerraformCLI@0
                 displayName: Terraform apply
                 inputs:
                   command: 'apply'
                   workingDirectory: '$(Pipeline.Workspace)/terraform-manifest-out'
                   environmentServiceName: 'Terraform_aks_deploy_connection_acitve_directory'
                   commandOptions: '$(Build.StagingDirectory)/dev-$(Build.BuildId).out'
                   allowTelemetryCollection: false